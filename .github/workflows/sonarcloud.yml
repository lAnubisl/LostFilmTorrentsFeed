# # This workflow uses actions that are not certified by GitHub.
# # They are provided by a third-party and are governed by
# # separate terms of service, privacy policy, and support
# # documentation.

# # This workflow helps you trigger a SonarCloud analysis of your code and populates
# # GitHub Code Scanning alerts with the vulnerabilities found.
# # Free for open source project.

# # 1. Login to SonarCloud.io using your GitHub account

# # 2. Import your project on SonarCloud
# #     * Add your GitHub organization first, then add your repository as a new project.
# #     * Please note that many languages are eligible for automatic analysis, 
# #       which means that the analysis will start automatically without the need to set up GitHub Actions.
# #     * This behavior can be changed in Administration > Analysis Method.
# #
# # 3. Follow the SonarCloud in-product tutorial
# #     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
# #          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
# #
# #     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
# #          (On SonarCloud, click on your avatar on top-right > My account > Security 
# #           or go directly to https://sonarcloud.io/account/security/)

# # Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# # or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

# name: SonarCloud analysis

# on:
#   push:
#     branches: [ "master" ]

# permissions:
#   pull-requests: read # allows SonarCloud to decorate PRs with analysis results

# env:
#   DOTNET_VERSION: '6.0.301'

# jobs:
#   analyze:
#     name: Analyze
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Github Action
#         uses: actions/checkout@v3
#         with:
#           # Disabling shallow clone is recommended for improving relevancy of reporting
#           fetch-depth: 0
        
#       - name: Setup dotnet
#         uses: actions/setup-dotnet@v2
#         with:
#           dotnet-version: ${{ env.DOTNET_VERSION }}

#       - name: Install tools
#         run: |
#           dotnet tool install --global dotnet-sonarscanner
#           dotnet tool install --global dotnet-coverage
#         # dotnet tool install --global JetBrains.dotCover.GlobalTool

#       - name: Begin Sonar scan
#         run: |
#           dotnet sonarscanner begin \
#             /k:"lAnubisl_LostFilmTorrentsFeed" \
#             /o:"lanubisl" \
#             /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
#             /d:sonar.host.url="https://sonarcloud.io" \
#             /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
#         #   /d:sonar.cs.dotcover.reportsPaths=dotCover.Output.html

#       - name: Build and run unit tests
#         run: |
#           dotnet restore "LostFilmMonitoring.sln"
#           dotnet build --no-restore
#           dotnet-coverage collect 'dotnet test --no-build --no-restore' -f xml -o 'coverage.xml'
#         # dotnet test --no-build --no-restore --collect "Code Coverage"
#         # dotnet dotcover test --dcReportType=HTML

#       - name: End Sonar scan
#         run: dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }}