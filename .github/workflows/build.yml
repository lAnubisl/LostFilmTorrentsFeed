name: 'Build and Publish'
on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '6.0.x' # set this to the dotnet version to use

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: 'Setup DotNet ${{ env.DOTNET_VERSION }} Environment'
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # - name: 'Install dotnet-sonarscanner'
      #   run: |
      #     dotnet tool install --global dotnet-sonarscanner
 
      # - name: 'Install dotnet-coverage'
      #   run: |
      #     dotnet tool install --global dotnet-coverage

      # - name: 'Install DeepSource CLI'
      #   run: |
      #     curl https://deepsource.io/cli | sh
      
      # - name: 'SonarCloud Begin'
      #   run: |
      #     dotnet sonarscanner begin \
      #       /k:"lAnubisl_LostFilmTorrentsFeed" \
      #       /o:"lanubisl" \
      #       /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
      #       /d:sonar.host.url="https://sonarcloud.io" \
      #       /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml

      # - name: 'CodeQL Begin'
      #   uses: github/codeql-action/init@v2
      #   with:
      #     languages: 'csharp'

      # - name: 'Restore Solution Dependencies'
      #   run: |
      #     dotnet restore
          
      # - name: 'Build Solution'
      #   run: |
      #     dotnet build --configuration Release --no-restore

      # - name: 'Run Unit Tests'
      #   run: |
      #     dotnet-coverage collect 'dotnet test --configuration Release --no-build --no-restore' -f xml -o 'coverage.xml'

      # - name: 'CodeQL End'
      #   uses: github/codeql-action/analyze@v2

      # - name: 'SonarCloud End'
      #   run: dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }}

      - name: 'Publish'
        shell: bash
        run: |
          dotnet build LostFilmMonitoring.AzureFunction/LostFilmMonitoring.AzureFunction.csproj --configuration Release --output publish

      - name: 'Store artifact'
        uses: actions/upload-artifact@v3
        with:
          name: 'azure-functionapp'
          path: |
            'publish'
          if-no-files-found: error
          retention-days: 5

  deploy_to_staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: 'build'
    if: ${{ github.ref_name == 'master' || github.ref_name == 'release' }}
    environment: 'Staging'
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: 'Download artifact'
        uses: actions/download-artifact@v3
        with:
          name: 'azure-functionapp'
          path: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
 
      - name: 'Deploy'
        uses: Azure/functions-action@v1
        with:
          app-name: '${{ secrets.AZURE_FUNCTION_APP_NAME }}'
          slot-name: 'Production'
          package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
          publish-profile: ${{ secrets.AZURE_FUNCTION_PUBLISH_PROFILE }}

  deploy_to_Production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: 'deploy_to_staging'
    if: ${{ github.ref_name == 'master' || github.ref_name == 'release' }}
    environment: 'Production'
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: 'Download artifact'
        uses: actions/download-artifact@v3
        with:
          name: 'azure-functionapp'
          path: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
 
      - name: 'Deploy'
        uses: Azure/functions-action@v1
        with:
          app-name: '${{ secrets.AZURE_FUNCTION_APP_NAME }}'
          slot-name: 'Production'
          package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
          publish-profile: ${{ secrets.AZURE_FUNCTION_PUBLISH_PROFILE }}